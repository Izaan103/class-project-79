(function(){
 // Initialize Firebase
        var config = {
            apiKey: "AIzaSyCHUgwZjKDmD1MaKIJsorxnfMw5iFvlL5w",
            authDomain: "pizzeria-f398a.firebaseapp.com",
            databaseURL: "https://pizzeria-f398a.firebaseio.com",
            projectId: "pizzeria-f398a",
            storageBucket: "pizzeria-f398a.appspot.com",
            messagingSenderId: "67320074020"
        };
        firebase.initializeApp(config);

    //var pizzas = document.getElementById('pizzas');
    
    /* This is for changes made on the items
    *dbRef.on('child_changed', snap => {
    *        console.log(snap.key + ': ' + snap.val())
    *    }); 
    */ 
    
    var app = angular.module('pizzApp', ['ngMaterial', 'firebase']);

app.factory("pizzas", ["$firebaseArray",
  function($firebaseArray) {
    // create a reference to the database where we will store our data
    var dbRefPizzas = firebase.database().ref().child("Pizzas");
    console.log("Getting data from DB");
    return $firebaseArray(dbRefPizzas);
  }
]);

app.controller('ShowPizzas', ["$scope", "pizzas", 
        function($scope, pizzas) {
            // todo// Get keys for Pizzas
            $scope.pizzas = pizzas;
            /*dbRefPizzas.on('child_added', snap => {

            // print keys, pizza name
            //console.log("Pizzas: " + snap.key);

            // get values within keys
            //item = dbRefPizzas.child(snap.key);

            //commented out to try $firebaseObject
            item.on('child_added', snap => {
                console.log(snap.key + ': ' + snap.val())
            }); 
        });*/
        }
    ]);
}());

var loggedUser;
initApp = function() {
        firebase.auth().onAuthStateChanged(function(user) {
          if (user) {
            // User is signed in.
            var displayName = user.displayName;
            var email = user.email;
            var emailVerified = user.emailVerified;
            var photoURL = user.photoURL;
            var uid = user.uid;
            var phoneNumber = user.phoneNumber;
            var providerData = user.providerData;
            var login = document.getElementById('login');
            loggedUser = user;
            user.getIdToken().then(function(accessToken) {
              //Show user name 
              
              
            });
          } else {
            // User is signed out.
            //document.getElementById("logName").innerHTML ='Sign in';
              
            
          }
        }, function(error) {
          console.log(error);
        });
      };

      window.addEventListener('load', function() {
        initApp()
});



$(document).ready(function(){
    function getView(nameView){
    
    if (name == ""){
        return;
    }
    
    var ajax = new XMLHttpRequest();
    
    ajax.onreadystatechange = function(){
        if (ajax.readyState == 4 && ajax.status == 200){
               $('#viewdiv').html(ajax.responseText)
        }
    };
    
        ajax.open('GET', nameView + '.html', true);
        ajax.send();
    }
    
    $("#carrito").on('click', function(){
        $("#viewdiv").load("/public/carrito.html", true);
        $("#greeting").hide();
    });
    
    $("#perfil").on('click', function(){
        if(loggedUser != null){
            $("#viewdiv").load("/public/perfil.html", true);
            $("#greeting").hide();
            var info = $("#info");
            //name = loggedUser.displayName.split(' ');
            var text = loggedUser.displayName;
            info.text(text);
        }
    });
    
    
    $("#logout").on('click', function(){
        firebase.auth().signOut();
        
    });
    
    $('#order').on('click', function(){
        $("#viewdiv").load("/public/menu.html", true);
        $("#greeting").hide();
    });
    
});

// FirebaseUI config.
      var uiConfig = {
        callbacks: {
          signInSuccess: function(currentUser, credential, redirectUrl) {
            // Do something.
            // Return type determines whether we continue the redirect automatically
            // or whether we leave that to developer to handle.
            return true;
          },
          uiShown: function() {
            // The widget is rendered.
            // Hide the loader.
            document.getElementById('loader').style.display = 'none';
          }
        },
        credentialHelper: firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM,
        // Query parameter name for mode.
        queryParameterForWidgetMode: 'mode',
        // Query parameter name for sign in success url.
        queryParameterForSignInSuccessUrl: 'signInSuccessUrl',
        // Will use popup for IDP Providers sign-in flow instead of the default, redirect.
        signInFlow: 'popup',
        signInSuccessUrl: 'public/perfil.html',
        signInOptions: [
          // Leave the lines as is for the providers you want to offer your users.
          firebase.auth.GoogleAuthProvider.PROVIDER_ID,
          firebase.auth.FacebookAuthProvider.PROVIDER_ID,
          firebase.auth.TwitterAuthProvider.PROVIDER_ID,
          {
            provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,
            // Whether the display name should be displayed in the Sign Up page.
            requireDisplayName: true
          },
          {
            provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,
            // Invisible reCAPTCHA with image challenge and bottom left badge.
            recaptchaParameters: {
              type: 'image',
              size: 'invisible',
              badge: 'bottomleft'
            }
          }
        ],
        // Terms of service url.
        tosUrl: '<your-tos-url>'
      };

      var ui = new firebaseui.auth.AuthUI(firebase.auth());
      // The start method will wait until the DOM is loaded.
      ui.start('#firebaseui-auth-container', uiConfig);


